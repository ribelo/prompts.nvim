{
  "endpoint": "chat/completions",
  "model": "gpt-4",
  "name": "act as rust docstringer",
  "trim_result": true,
  "messages": [
    {
      "role": "system",
      "content": "You're a senior rust developer with a deep understanding of industry-standard best practices and clean code principles, which makes you an expert in writing clear and comprehensive technical documentation."
    },
    {
      "role": "user",
      "content": "Craft comprehensive documentation for the provided code snippet using simple and descriptive language. Focus on providing detailed information about the function's input parameters and return values, adhering to industry best practices. Ensure that your final docstring exhibits your proficiency in Rust programming and is user-friendly for other developers. Your specific objectives are to:\n\n- Clearly explain the purpose of the code.\n- Describe each of the function's input parameters and their types using markdown code syntax.\n- Provide at least one usage example.\n\nPlease return only the docstring in markdown format without any comment"
    },
    {
      "role": "user",
      "content": "fn split_text_into_sentences(\n    text: impl AsRef<str>,\n    n: usize,\n    min_length: Option<usize>,\n    max_length: Option<usize>,\n    min_overlap: Option<usize>,\n    max_overlap: Option<usize>,\n) -> Vec<String> {\n    let text = text.as_ref();\n    let sentences: Vec<&str> = UnicodeSegmentation::unicode_sentences(text).collect();\n    let mut chunks: Vec<String> = vec![];\n\n    let mut i = 0;\n    while i < sentences.len() {\n        let mut chunk = sentences[i..cmp::min(i + n, sentences.len())].join(\" \");\n        while min_length.map_or(false, |min| chunk.len() < min) && i + n < sentences.len() {\n            i += 1;\n            chunk = sentences[i..cmp::min(i + n, sentences.len())].join(\" \");\n        }\n        if let Some(max) = max_length {\n            if chunk.len() > max {\n                chunk = chunk[..max].to_string();\n            }\n        }\n        chunks.push(chunk);\n        let overlap = cmp::min(n, max_overlap.unwrap_or(n));\n        i += n - min_overlap.unwrap_or(0);\n        i = cmp::min(i, sentences.len() - overlap);\n    }\n\n    chunks\n}"
    },
    {
      "role": "assistant",
      "content": "/// Splits the provided text into chunks of sentences based on the provided parameters.\n///\n/// This function splits the given text into chunks of n sentences. Each chunk contains at\n/// least a minimum overlap of sentences with the next one. The function also ensures that\n/// each chunk has at least a minimum length and a maximum length. All chunks are returned\n/// as a vector of strings.\n///\n/// # Arguments\n///\n/// * `text`: `impl AsRef<str>` - The text to be split into sentence chunks.\n///\n/// * `n`: `usize` - The number of sentences for each chunk of text.\n///\n/// * `min_overlap`: `Option<usize>` - The minimum number of sentences that should overlap\n/// between adjacent chunks. If not specified, there will be no minimum overlap.\n///\n/// * `max_overlap`: `Option<usize>` - The maximum number of sentences that can overlap\n/// between adjacent chunks. If not specified, this defaults to the number of sentences in each chunk.\n///\n/// * `min_length`: The minimum length a chunk of sentences should be.\n/// If this is not met, sentences will be added until it is.\n///\n/// * `max_length`: The maximum length a chunk of sentences can be.\n/// If this is met, the chunk will be trimmed down to this length.\n///\n/// # Returns\n///\n/// A `Vec<String>` containing chunks of sentences from the input text.\n///\n/// # Examples\n///\n/// ```rust\n/// let text = \"Hello world. We're splitting sentences. In chunks of three. With overlaps of one.\";\n/// let chunks = split_text_into_sentences(text, 3, Some(1), None, None, None);\n/// assert_eq!(\n///     chunks,\n///     [\n///        \"Hello world. We're splitting sentences. In chunks of three.\",\n///        \"We're splitting sentences. In chunks of three. With overlaps of one.\"\n///     ]\n/// );\n/// ```"
    },
    {
      "role": "user",
      "content": "#[derive(Debug, Serialize, Deserialize)]\npub struct MessageResponse {\nrole: Role,\ncontent: String,\nname: Option<String>,\nfunction_call: Option<String>,\n}"
    },
    {
      "role": "assistant",
      "content": "/// Struct type representing a MessageResponse.\n///\n/// # Fields\n///\n/// * `role`: The role of the messages author. It is a required field.\n/// Values can be one of the following: `system`, `user`, `assistant`, or `function`.\n///\n/// * The contents of the message. This field is required for all messages,\n/// and may be null for assistant messages with function calls.\n///\n/// * `name`: The name of the author of this message. This field is optional.\n/// The name is required if role is `function`, and it should be the name of the function\n/// whose response is in the `content`. It may contain a-z, A-Z, 0-9, and underscores,\n/// with a maximum length of 64 characters.\n///\n/// * The name and arguments of a function that should be\n/// called, as generated by the model. This field is optional."
    },
    {
      "role": "user",
      "content": "{{selection}}"
    }
  ]
}
