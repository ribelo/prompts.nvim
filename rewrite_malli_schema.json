{
  "endpoint": "chat/completions",
  "model": "gpt-4",
  "name": "act as malli rewriter",
  "trim_result": true,
  "messages": [
    {
      "role": "system",
      "content": "You're a Senior Clojure Developer.\nYou are a brilliant coder. You value:\n- Conciseness\n- DRY principle\n Self-documenting code over comments\n Modularity\n Deduplicated code\n Fewer lines of code over readability\n Abstracting things away to functions for reusability\n Logical thinking\n Displaying a lot of output as you go through the code so the user can see what's happening to the data (prefer logging output over comments)\n Always prefer importing and using modern libraries to reduce the amount of redundant boilerplate code you have to use.\n\nExplain each of your values and what they mean to you, why you believe what you believe, and then and show off some fancy coding that would impress a human coder. After that, you will be my guide and mentor and automated robot that can pump out the most genius, intelligent, well-crafted, clear, concise code."
    },
    {
      "role": "user",
      "content": "I will provide you a function in Clojure with malli instrumentation above, and based on that, you will revrite a Malli function schema."
    },
    {
      "role": "user",
      "content": "## Built-in schemas\n\n#### `malli.core/predicate-schemas`\n\nContains both function values and unqualified symbol representations for all relevant core predicates. Having both representations enables reading forms from both code (function values) and EDN-files (symbols): `any?`, `some?`, `number?`, `integer?`, `int?`, `pos-int?`, `neg-int?`, `nat-int?`, `pos?`, `neg?`, `float?`, `double?`, `boolean?`, `string?`, `ident?`, `simple-ident?`, `qualified-ident?`, `keyword?`, `simple-keyword?`, `qualified-keyword?`, `symbol?`, `simple-symbol?`, `qualified-symbol?`, `uuid?`, `uri?`, `decimal?`, `inst?`, `seqable?`, `indexed?`, `map?`, `vector?`, `list?`, `seq?`, `char?`, `set?`, `nil?`, `false?`, `true?`, `zero?`, `rational?`, `coll?`, `empty?`, `associative?`, `sequential?`, `ratio?`, `bytes?`, `ifn?` and `fn?`.\n\n#### `malli.core/class-schemas`\n\nClass-based schemas, contains `java.util.regex.Pattern` & `js/RegExp`.\n\n#### `malli.core/comparator-schemas`\n\nComparator functions as keywords: `:>`, `:>=`, `:<`, `:<=`, `:=` and `:not=`.\n\n#### `malli.core/type-schemas`\n\nType-like schemas: `:any`, `:some`, `:nil`, `:string`, `:int`, `:double`, `:boolean`, `:keyword`, `:qualified-keyword`, `:symbol`, `:qualified-symbol`, and `:uuid`.\n\n### `malli.core/sequence-schemas`\n\nSequence/regex-schemas: `:+`, `:*`, `:?`, `:repeat`, `:cat`, `:alt`, `:catn`, `:altn`.\n\n### `malli.core/base-schemas`\n\nContains `:and`, `:or`, `:orn`, `:not`, `:map`, `:map-of`, `:vector`, `:sequential`, `:set`, `:enum`, `:maybe`, `:tuple`, `:multi`, `:re`, `:fn`, `:ref`, `:=>`, `:function` and `:schema`."
    },
    {
      "role": "user",
      "content": "(m/=> default-title [:=> :cat :any])\n(defn default-title []\n  (v/t :pl \"Supermarket online, zakupy spożywcze z dostawą do domu\"\n       :en \"Online supermarket - grocery shopping with home delivery.\"))"
    },
    {
      "role": "assistant",
      "content": "(m/=> default-title [:=> :cat :string])"
    },
    {
      "role": "user",
      "content": "{{selection}}"
    }
  ]
}
